// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package tx

import (
	"sync"
)

// Ensure, that TransactionMock does implement Transaction.
// If this is not the case, regenerate this file with moq.
var _ Transaction = &TransactionMock{}

// TransactionMock is a mock implementation of Transaction.
//
//	func TestSomethingThatUsesTransaction(t *testing.T) {
//
//		// make and configure a mocked Transaction
//		mockedTransaction := &TransactionMock{
//			BeginFunc: func() error {
//				panic("mock out the Begin method")
//			},
//			CommitFunc: func() error {
//				panic("mock out the Commit method")
//			},
//			ExecFunc: func(query string, args ...any) error {
//				panic("mock out the Exec method")
//			},
//			RollbackFunc: func() error {
//				panic("mock out the Rollback method")
//			},
//		}
//
//		// use mockedTransaction in code that requires Transaction
//		// and then make assertions.
//
//	}
type TransactionMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func() error

	// CommitFunc mocks the Commit method.
	CommitFunc func() error

	// ExecFunc mocks the Exec method.
	ExecFunc func(query string, args ...any) error

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
		}
		// Commit holds details about calls to the Commit method.
		Commit []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []any
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
		}
	}
	lockBegin    sync.RWMutex
	lockCommit   sync.RWMutex
	lockExec     sync.RWMutex
	lockRollback sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *TransactionMock) Begin() error {
	callInfo := struct {
	}{}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	if mock.BeginFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.BeginFunc()
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedTransaction.BeginCalls())
func (mock *TransactionMock) BeginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// Commit calls CommitFunc.
func (mock *TransactionMock) Commit() error {
	callInfo := struct {
	}{}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	if mock.CommitFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CommitFunc()
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedTransaction.CommitCalls())
func (mock *TransactionMock) CommitCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *TransactionMock) Exec(query string, args ...any) error {
	callInfo := struct {
		Query string
		Args  []any
	}{
		Query: query,
		Args:  args,
	}
	mock.lockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	mock.lockExec.Unlock()
	if mock.ExecFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.ExecFunc(query, args...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//
//	len(mockedTransaction.ExecCalls())
func (mock *TransactionMock) ExecCalls() []struct {
	Query string
	Args  []any
} {
	var calls []struct {
		Query string
		Args  []any
	}
	mock.lockExec.RLock()
	calls = mock.calls.Exec
	mock.lockExec.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *TransactionMock) Rollback() error {
	callInfo := struct {
	}{}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	if mock.RollbackFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RollbackFunc()
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//
//	len(mockedTransaction.RollbackCalls())
func (mock *TransactionMock) RollbackCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"go-mock-test-demo/gacha/domain"
	"go-mock-test-demo/tx"
	"sync"
)

// Ensure, that UserMock does implement User.
// If this is not the case, regenerate this file with moq.
var _ User = &UserMock{}

// UserMock is a mock implementation of User.
//
//	func TestSomethingThatUsesUser(t *testing.T) {
//
//		// make and configure a mocked User
//		mockedUser := &UserMock{
//			DecreaseCoinsWithTxFunc: func(txMoqParam tx.Transaction, userId int64, amount int) error {
//				panic("mock out the DecreaseCoinsWithTx method")
//			},
//			FindByIdFunc: func(id int64) (*domain.User, error) {
//				panic("mock out the FindById method")
//			},
//		}
//
//		// use mockedUser in code that requires User
//		// and then make assertions.
//
//	}
type UserMock struct {
	// DecreaseCoinsWithTxFunc mocks the DecreaseCoinsWithTx method.
	DecreaseCoinsWithTxFunc func(txMoqParam tx.Transaction, userId int64, amount int) error

	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(id int64) (*domain.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// DecreaseCoinsWithTx holds details about calls to the DecreaseCoinsWithTx method.
		DecreaseCoinsWithTx []struct {
			// TxMoqParam is the txMoqParam argument value.
			TxMoqParam tx.Transaction
			// UserId is the userId argument value.
			UserId int64
			// Amount is the amount argument value.
			Amount int
		}
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// ID is the id argument value.
			ID int64
		}
	}
	lockDecreaseCoinsWithTx sync.RWMutex
	lockFindById            sync.RWMutex
}

// DecreaseCoinsWithTx calls DecreaseCoinsWithTxFunc.
func (mock *UserMock) DecreaseCoinsWithTx(txMoqParam tx.Transaction, userId int64, amount int) error {
	callInfo := struct {
		TxMoqParam tx.Transaction
		UserId     int64
		Amount     int
	}{
		TxMoqParam: txMoqParam,
		UserId:     userId,
		Amount:     amount,
	}
	mock.lockDecreaseCoinsWithTx.Lock()
	mock.calls.DecreaseCoinsWithTx = append(mock.calls.DecreaseCoinsWithTx, callInfo)
	mock.lockDecreaseCoinsWithTx.Unlock()
	if mock.DecreaseCoinsWithTxFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DecreaseCoinsWithTxFunc(txMoqParam, userId, amount)
}

// DecreaseCoinsWithTxCalls gets all the calls that were made to DecreaseCoinsWithTx.
// Check the length with:
//
//	len(mockedUser.DecreaseCoinsWithTxCalls())
func (mock *UserMock) DecreaseCoinsWithTxCalls() []struct {
	TxMoqParam tx.Transaction
	UserId     int64
	Amount     int
} {
	var calls []struct {
		TxMoqParam tx.Transaction
		UserId     int64
		Amount     int
	}
	mock.lockDecreaseCoinsWithTx.RLock()
	calls = mock.calls.DecreaseCoinsWithTx
	mock.lockDecreaseCoinsWithTx.RUnlock()
	return calls
}

// FindById calls FindByIdFunc.
func (mock *UserMock) FindById(id int64) (*domain.User, error) {
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	mock.lockFindById.Unlock()
	if mock.FindByIdFunc == nil {
		var (
			userOut *domain.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.FindByIdFunc(id)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//
//	len(mockedUser.FindByIdCalls())
func (mock *UserMock) FindByIdCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockFindById.RLock()
	calls = mock.calls.FindById
	mock.lockFindById.RUnlock()
	return calls
}

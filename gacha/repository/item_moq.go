// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"go-mock-test-demo/gacha/domain"
	"sync"
)

// Ensure, that ItemMock does implement Item.
// If this is not the case, regenerate this file with moq.
var _ Item = &ItemMock{}

// ItemMock is a mock implementation of Item.
//
//	func TestSomethingThatUsesItem(t *testing.T) {
//
//		// make and configure a mocked Item
//		mockedItem := &ItemMock{
//			FindItemAndWeightsFunc: func() ([]*domain.Item, []int, error) {
//				panic("mock out the FindItemAndWeights method")
//			},
//		}
//
//		// use mockedItem in code that requires Item
//		// and then make assertions.
//
//	}
type ItemMock struct {
	// FindItemAndWeightsFunc mocks the FindItemAndWeights method.
	FindItemAndWeightsFunc func() ([]*domain.Item, []int, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindItemAndWeights holds details about calls to the FindItemAndWeights method.
		FindItemAndWeights []struct {
		}
	}
	lockFindItemAndWeights sync.RWMutex
}

// FindItemAndWeights calls FindItemAndWeightsFunc.
func (mock *ItemMock) FindItemAndWeights() ([]*domain.Item, []int, error) {
	callInfo := struct {
	}{}
	mock.lockFindItemAndWeights.Lock()
	mock.calls.FindItemAndWeights = append(mock.calls.FindItemAndWeights, callInfo)
	mock.lockFindItemAndWeights.Unlock()
	if mock.FindItemAndWeightsFunc == nil {
		var (
			itemsOut   []*domain.Item
			weightsOut []int
			errOut     error
		)
		return itemsOut, weightsOut, errOut
	}
	return mock.FindItemAndWeightsFunc()
}

// FindItemAndWeightsCalls gets all the calls that were made to FindItemAndWeights.
// Check the length with:
//
//	len(mockedItem.FindItemAndWeightsCalls())
func (mock *ItemMock) FindItemAndWeightsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFindItemAndWeights.RLock()
	calls = mock.calls.FindItemAndWeights
	mock.lockFindItemAndWeights.RUnlock()
	return calls
}
